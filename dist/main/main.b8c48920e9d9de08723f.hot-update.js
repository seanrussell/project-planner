exports.id = "main";
exports.modules = {

/***/ "./src/main/routes/index.js":
/*!**********************************!*\
  !*** ./src/main/routes/index.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! electron */ \"electron\");\n/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nanoid */ \"nanoid\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(nanoid__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _models_User__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/User */ \"./src/main/models/User.js\");\n/* harmony import */ var _models_Project__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Project */ \"./src/main/models/Project.js\");\n/* harmony import */ var _models_Backlog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/Backlog */ \"./src/main/models/Backlog.js\");\n/* harmony import */ var _models_Sprint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/Sprint */ \"./src/main/models/Sprint.js\");\n/* harmony import */ var _models_Board__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/Board */ \"./src/main/models/Board.js\");\n/* harmony import */ var _models_BoardLane__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/BoardLane */ \"./src/main/models/BoardLane.js\");\n/* harmony import */ var _models_Story__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/Story */ \"./src/main/models/Story.js\");\n/* harmony import */ var _models_Task__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/Task */ \"./src/main/models/Task.js\");\n/* harmony import */ var _models_ProjectTeamMember__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/ProjectTeamMember */ \"./src/main/models/ProjectTeamMember.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst addBoardLanes = async (storyIds, boardId) => {\n  if (storyIds.length > 0) {\n    let bls = []; // Create board lanes\n\n    for (let storyId of storyIds) {\n      bls.push({\n        board: boardId,\n        story: storyId,\n        title: 'To Do',\n        name: '_todo_' + Object(nanoid__WEBPACK_IMPORTED_MODULE_1__[\"nanoid\"])(10),\n        sort: 1\n      });\n      bls.push({\n        board: boardId,\n        story: storyId,\n        title: 'In Progress',\n        name: '_inprogress_' + Object(nanoid__WEBPACK_IMPORTED_MODULE_1__[\"nanoid\"])(10),\n        sort: 2\n      });\n      bls.push({\n        board: boardId,\n        story: storyId,\n        title: 'Complete',\n        name: '_complete_' + Object(nanoid__WEBPACK_IMPORTED_MODULE_1__[\"nanoid\"])(10),\n        sort: 3\n      });\n    }\n\n    await _models_BoardLane__WEBPACK_IMPORTED_MODULE_7__[\"default\"].create(bls);\n  }\n};\n\nconst initRoutes = () => {\n  // GET Projects\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('projects:get', async (event, arg) => {\n    if (arg) {\n      // Single project\n      const project = await _models_Project__WEBPACK_IMPORTED_MODULE_3__[\"default\"].findById(arg);\n      return JSON.stringify(project);\n    } else {\n      // All projects\n      try {\n        const projects = await _models_Project__WEBPACK_IMPORTED_MODULE_3__[\"default\"].find().sort({\n          created: 1\n        });\n        return JSON.stringify(projects);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }); // ADD Project\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('projects:add', async (event, arg) => {\n    if (arg) {\n      const project = await _models_Project__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create(arg);\n      return JSON.stringify(project);\n    }\n  }); // UPDATE Project\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('projects:update', async (event, arg) => {\n    if (arg) {\n      const project = await _models_Project__WEBPACK_IMPORTED_MODULE_3__[\"default\"].updateOne({\n        _id: arg._id\n      }, arg);\n      return JSON.stringify(project);\n    }\n  }); // DELETE Project\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('projects:delete', async (event, arg) => {\n    if (arg) {\n      const project = await _models_Project__WEBPACK_IMPORTED_MODULE_3__[\"default\"].deleteOne({\n        _id: arg\n      });\n      return JSON.stringify(project);\n    }\n  }); // GET Backlogs\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('backlogs:get', async (event, backlogId, projectId) => {\n    if (backlogId) {\n      // Single backlog\n      const backlog = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].findById(backlogId).populate('project');\n      return JSON.stringify(backlog);\n    } else {\n      // All backlogs\n      try {\n        const filter = projectId ? {\n          project: projectId\n        } : {};\n        const backlogs = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].find(filter).populate('project').sort({\n          created: 1\n        });\n        return JSON.stringify(backlogs);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }); // ADD Backlog\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('backlogs:add', async (event, arg) => {\n    if (arg) {\n      const backlog = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].create(arg);\n      return JSON.stringify(backlog);\n    }\n  }); // UPDATE Backlog\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('backlogs:update', async (event, arg) => {\n    if (arg) {\n      const backlog = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].updateOne({\n        _id: arg._id\n      }, arg);\n      return JSON.stringify(backlog);\n    }\n  }); // DELETE Backlog\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('backlogs:delete', async (event, arg) => {\n    if (arg) {\n      const backlog = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].deleteOne({\n        _id: arg\n      });\n      return JSON.stringify(backlog);\n    }\n  }); // GET Sprints\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('sprints:get', async (event, sprintId, projectId) => {\n    if (sprintId) {\n      // Single sprint\n      const sprint = await _models_Sprint__WEBPACK_IMPORTED_MODULE_5__[\"default\"].findById(sprintId).populate('project');\n      return JSON.stringify(sprint);\n    } else {\n      // All sprints\n      try {\n        const filter = projectId ? {\n          project: projectId\n        } : {};\n        const sprints = await _models_Sprint__WEBPACK_IMPORTED_MODULE_5__[\"default\"].find(filter).populate('project').sort({\n          created: 1\n        });\n        return JSON.stringify(sprints);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }); // ADD Sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('sprints:add', async (event, arg) => {\n    if (arg) {\n      const sprint = await _models_Sprint__WEBPACK_IMPORTED_MODULE_5__[\"default\"].create(arg); // create default board\n\n      const board = new _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n        name: sprint.name + ' Board',\n        sprint: sprint._id,\n        created: Datetime.now(),\n        createdBy: sprint.createdBy\n      });\n      await board.save();\n      return JSON.stringify(sprint);\n    }\n  }); // UPDATE Sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('sprints:update', async (event, arg) => {\n    if (arg) {\n      const sprint = await _models_Sprint__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateOne({\n        _id: arg._id\n      }, arg);\n      return JSON.stringify(sprint);\n    }\n  }); // DELETE Sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('sprints:delete', async (event, arg) => {\n    if (arg) {\n      const sprint = await _models_Sprint__WEBPACK_IMPORTED_MODULE_5__[\"default\"].deleteOne({\n        _id: arg\n      }); // Remove stories from sprint \n      // Delete board lanes assigned to stories \n      // Delete board associated with sprint\n\n      return JSON.stringify(sprint);\n    }\n  }); // GET Boards\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('boards:get', async (event, arg) => {\n    if (arg) {\n      // Single board\n      let board = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].findById(arg).populate({\n        path: 'sprint',\n        populate: {\n          path: 'project'\n        }\n      });\n      board = JSON.parse(JSON.stringify(board)); // GET all board lanes in board\n\n      let boardLanes = await _models_BoardLane__WEBPACK_IMPORTED_MODULE_7__[\"default\"].find({\n        board: board._id\n      }).populate('story').sort({\n        sort: 1\n      });\n      boardLanes = JSON.parse(JSON.stringify(boardLanes));\n      let boardLaneMap = boardLanes.reduce((acc, boardLane) => {\n        return { ...acc,\n          [boardLane._id]: boardLane\n        };\n      }, {}); // GET all stories in board\n\n      let stories = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].find({\n        board: board._id\n      }).populate('assigned');\n      stories = JSON.parse(JSON.stringify(stories)); // GET all tasks for each story in board\n\n      let storyMap = stories.reduce((acc, story) => {\n        return { ...acc,\n          [story._id]: story\n        };\n      }, {});\n      let tasks = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].find({\n        story: {\n          $in: Object.keys(storyMap)\n        }\n      }).populate('assigned').sort({\n        sortorder: 1\n      });\n      tasks = JSON.parse(JSON.stringify(tasks)); // Add Tasks to stories and board lanes\n\n      tasks.forEach(task => {\n        if (!storyMap[task.story].tasks) {\n          storyMap[task.story]['tasks'] = [];\n        }\n\n        storyMap[task.story].tasks.push(task);\n\n        if (task.boardlane in boardLaneMap) {\n          if (!boardLaneMap[task.boardlane].tasks) {\n            boardLaneMap[task.boardlane]['tasks'] = [];\n          }\n\n          boardLaneMap[task.boardlane].tasks.push(task);\n        }\n      }); // Add boardlanes to stories\n\n      boardLanes.forEach(boardlane => {\n        if (!storyMap[boardlane.story._id].boardlanes) {\n          storyMap[boardlane.story._id]['boardlanes'] = [];\n        }\n\n        storyMap[boardlane.story._id].boardlanes.push(boardlane);\n      }); // Add stories and board lanes to board\n\n      board['stories'] = storyMap ? Object.values(storyMap) : [];\n      board['boardlanes'] = boardLaneMap ? Object.values(boardLaneMap) : [];\n      return JSON.stringify(board);\n    } else {\n      // All boards\n      try {\n        const boards = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].find().populate({\n          path: 'sprint',\n          populate: {\n            path: 'project'\n          }\n        }).sort({\n          created: 1\n        });\n        return JSON.stringify(boards);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }); // GET Board for sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('boards:sprint:get', async (event, sprintId) => {\n    if (sprintId) {\n      const board = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].findOne({\n        sprint: sprintId\n      });\n      return JSON.stringify(board);\n    }\n  }); // ADD Board\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('boards:add', async (event, arg) => {\n    if (arg) {\n      const board = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].create(arg);\n      return JSON.stringify(board);\n    }\n  }); // UPDATE Board\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('boards:update', async (event, arg) => {\n    if (arg) {\n      const board = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].updateOne({\n        _id: arg._id\n      }, arg);\n      return JSON.stringify(board);\n    }\n  }); // DELETE Board\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('boards:delete', async (event, arg) => {\n    if (arg) {\n      const board = await _models_Board__WEBPACK_IMPORTED_MODULE_6__[\"default\"].deleteOne({\n        _id: arg\n      });\n      return JSON.stringify(board);\n    }\n  }); // ADD Task\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('tasks:add', async (event, arg) => {\n    if (arg) {\n      const createdTask = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].create(arg);\n      const task = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].findById({\n        _id: createdTask._id\n      }).populate('assigned');\n      return JSON.stringify(task);\n    }\n  }); // UPDATE Task\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('tasks:update', async (event, taskId, boardLaneId, tasks, fullUpate) => {\n    if (taskId && boardLaneId) {\n      await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].updateOne({\n        _id: taskId\n      }, {\n        boardlane: boardLaneId\n      });\n      const task = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].findById({\n        _id: taskId\n      }).populate('assigned');\n      return JSON.stringify(task);\n    } else {\n      if (fullUpate) {\n        const res = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].updateOne({\n          _id: tasks._id\n        }, tasks);\n      } else {\n        for (let task of tasks) {\n          const res = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].updateOne({\n            _id: task._id\n          }, {\n            sortorder: task.sortorder\n          });\n        }\n      }\n\n      return JSON.stringify(tasks);\n    }\n  }); // DELETE Task\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('task:delete', async (event, arg) => {\n    if (arg) {\n      const task = await _models_Task__WEBPACK_IMPORTED_MODULE_9__[\"default\"].deleteOne({\n        _id: arg\n      });\n      return JSON.stringify(task);\n    }\n  }); // GET Stories\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:get', async (event, backlogId, sprintId) => {\n    if (backlogId) {\n      // Stories for backlog\n      const stories = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].find({\n        backlog: backlogId\n      }).populate('assigned').populate('sprint');\n      return JSON.stringify(stories);\n    } else {\n      // All stories\n      try {\n        const filter = sprintId ? {\n          sprint: sprintId\n        } : {};\n        const stories = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].find(filter).populate('assigned').populate('sprint');\n        return JSON.stringify(stories);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }); // ADD Story\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:add', async (event, arg) => {\n    if (arg) {\n      const story = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].create(arg);\n\n      if (story.board != null) {\n        addBoardLanes([story._id], story.board._id);\n      }\n\n      return JSON.stringify(story);\n    }\n  }); // UPDATE Story\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:update', async (event, arg) => {\n    if (arg) {\n      const story = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne({\n        _id: arg._id\n      }, arg);\n      return JSON.stringify(story);\n    }\n  }); // DELETE Story\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:delete', async (event, arg) => {\n    if (arg) {\n      const board = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].deleteOne({\n        _id: arg\n      });\n      return JSON.stringify(board);\n    }\n  }); // REMOVE Story from sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:sprint:delete', async (event, arg) => {\n    if (arg) {\n      const story = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateOne({\n        _id: arg\n      }, {\n        sprint: null,\n        board: null\n      });\n      await _models_BoardLane__WEBPACK_IMPORTED_MODULE_7__[\"default\"].deleteMany({\n        story: arg\n      });\n      return JSON.stringify(story);\n    }\n  }); // GET Stories from backlogs\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:backlogs:get', async (event, projectId) => {\n    // Get backlogs in project \n    const backlogs = await _models_Backlog__WEBPACK_IMPORTED_MODULE_4__[\"default\"].find({\n      project: projectId\n    });\n    const backlogMap = backlogs.reduce((acc, backlog) => {\n      return { ...acc,\n        [backlog._id]: backlog\n      };\n    }, {}); // Stories for backlog\n\n    const stories = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].find({\n      backlog: {\n        $in: Object.keys(backlogMap)\n      },\n      sprint: {\n        $eq: null\n      }\n    }).populate('assigned').populate('backlog');\n    return JSON.stringify(stories);\n  }); // ADD Stories to sprint\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('stories:sprint:add', async (event, sprintId, storyIds, boardId) => {\n    // GET stories\n    const stories = await _models_Story__WEBPACK_IMPORTED_MODULE_8__[\"default\"].updateMany({\n      _id: {\n        $in: storyIds\n      }\n    }, {\n      sprint: sprintId,\n      state: 'Committed',\n      board: boardId\n    });\n    addBoardLanes(storyIds, boardId);\n    return JSON.stringify(stories);\n  }); // GET Teammembers\n\n  electron__WEBPACK_IMPORTED_MODULE_0__[\"ipcMain\"].handle('teammembers:get', async (event, projectId) => {\n    try {\n      const filter = projectId ? {\n        project: projectId\n      } : {};\n      const teammembers = await _models_ProjectTeamMember__WEBPACK_IMPORTED_MODULE_10__[\"default\"].find(filter).populate('user');\n      return JSON.stringify(teammembers);\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (initRoutes);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/routes/index.js\n");

/***/ })

};